// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.33440
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dominio.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingATileFeature")]
    public partial class UsingATileFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UsingATileFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UsingATileFeature", "In order to use one of my pieces\r\nAs a domino player\r\nI want to take a tile from " +
                    "my hand and place it on the board", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place tile on board and remove it from the player hand")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void PlaceTileOnBoardAndRemoveItFromThePlayerHand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place tile on board and remove it from the player hand", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("A new game with a clean board", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Head",
                        "Tail"});
            table1.AddRow(new string[] {
                        "0",
                        "3"});
            table1.AddRow(new string[] {
                        "0",
                        "5"});
            table1.AddRow(new string[] {
                        "5",
                        "6"});
            table1.AddRow(new string[] {
                        "0",
                        "1"});
            table1.AddRow(new string[] {
                        "4",
                        "5"});
            table1.AddRow(new string[] {
                        "4",
                        "6"});
            table1.AddRow(new string[] {
                        "2",
                        "3"});
#line 9
 testRunner.And("Player one has seven tiles in the hand", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Head",
                        "Tail"});
            table2.AddRow(new string[] {
                        "3",
                        "4"});
            table2.AddRow(new string[] {
                        "2",
                        "4"});
            table2.AddRow(new string[] {
                        "2",
                        "5"});
            table2.AddRow(new string[] {
                        "0",
                        "2"});
            table2.AddRow(new string[] {
                        "2",
                        "6"});
            table2.AddRow(new string[] {
                        "1",
                        "5"});
            table2.AddRow(new string[] {
                        "1",
                        "4"});
#line 18
 testRunner.And("Player two has seven tiles in the hand", ((string)(null)), table2, "And ");
#line 27
 testRunner.And("Player one starts playing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Head",
                        "Tail"});
            table3.AddRow(new string[] {
                        "1",
                        "1"});
            table3.AddRow(new string[] {
                        "0",
                        "4"});
            table3.AddRow(new string[] {
                        "1",
                        "3"});
            table3.AddRow(new string[] {
                        "0",
                        "6"});
            table3.AddRow(new string[] {
                        "3",
                        "3"});
#line 28
 testRunner.When("The board has tiles placed", ((string)(null)), table3, "When ");
#line 39
 testRunner.And("Player one places one of his tiles on the board", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("the tile must be removed from his hand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("the tile must be added to the board", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
