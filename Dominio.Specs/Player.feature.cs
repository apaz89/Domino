// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.33440
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dominio.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Player")]
    public partial class PlayerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Player.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Player", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player one gets a tile from stock")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void PlayerOneGetsATileFromStock()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player one gets a tile from stock", new string[] {
                        "mytag"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("a Domino game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Head",
                        "Tail"});
            table1.AddRow(new string[] {
                        "2",
                        "6"});
            table1.AddRow(new string[] {
                        "6",
                        "6"});
            table1.AddRow(new string[] {
                        "2",
                        "3"});
            table1.AddRow(new string[] {
                        "3",
                        "4"});
            table1.AddRow(new string[] {
                        "4",
                        "4"});
            table1.AddRow(new string[] {
                        "4",
                        "5"});
            table1.AddRow(new string[] {
                        "2",
                        "2"});
#line 7
 testRunner.And("a stock", ((string)(null)), table1, "And ");
#line 16
 testRunner.And("Player 1 doesn\'t have a matching piece", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("add 1 tile to Player 1 list of tiles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("remove 1 tile from stock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The winner is the player with less quantity of pieces left")]
        public virtual void TheWinnerIsThePlayerWithLessQuantityOfPiecesLeft()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The winner is the player with less quantity of pieces left", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("a Domino game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("an empty stock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("Player 1 doesn\'t have a matching piece", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.Then("validate the players pieces amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("return player number with less pieces left", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When player 1 puts a piece on the board is the player\'s turn 2, where is the 2 is" +
            " the turn of one.")]
        public virtual void WhenPlayer1PutsAPieceOnTheBoardIsThePlayerSTurn2WhereIsThe2IsTheTurnOfOne_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When player 1 puts a piece on the board is the player\'s turn 2, where is the 2 is" +
                    " the turn of one.", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("a Domino game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("a Domino StartBord", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Head",
                        "Tail"});
            table2.AddRow(new string[] {
                        "0",
                        "6"});
            table2.AddRow(new string[] {
                        "0",
                        "5"});
            table2.AddRow(new string[] {
                        "0",
                        "2"});
            table2.AddRow(new string[] {
                        "1",
                        "2"});
            table2.AddRow(new string[] {
                        "5",
                        "2"});
            table2.AddRow(new string[] {
                        "0",
                        "6"});
            table2.AddRow(new string[] {
                        "1",
                        "3"});
#line 32
 testRunner.When("the player one has the following sets of tiles", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Head",
                        "Tail"});
            table3.AddRow(new string[] {
                        "0",
                        "2"});
            table3.AddRow(new string[] {
                        "1",
                        "3"});
            table3.AddRow(new string[] {
                        "1",
                        "2"});
            table3.AddRow(new string[] {
                        "1",
                        "5"});
            table3.AddRow(new string[] {
                        "2",
                        "6"});
            table3.AddRow(new string[] {
                        "2",
                        "2"});
            table3.AddRow(new string[] {
                        "2",
                        "3"});
#line 41
 testRunner.And("the player two has the following set of tiles", ((string)(null)), table3, "And ");
#line 50
 testRunner.And("Player one puts his piece on the board", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.Then("is the turn of the player 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When The player puts a Tile on the Board")]
        public virtual void WhenThePlayerPutsATileOnTheBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When The player puts a Tile on the Board", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("is the turn of player one", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Head",
                        "Tail"});
            table4.AddRow(new string[] {
                        "0",
                        "1"});
            table4.AddRow(new string[] {
                        "0",
                        "6"});
            table4.AddRow(new string[] {
                        "0",
                        "5"});
            table4.AddRow(new string[] {
                        "1",
                        "3"});
            table4.AddRow(new string[] {
                        "5",
                        "6"});
            table4.AddRow(new string[] {
                        "0",
                        "2"});
            table4.AddRow(new string[] {
                        "1",
                        "2"});
#line 58
 testRunner.When("the board has the next set of tiles", ((string)(null)), table4, "When ");
#line 67
 testRunner.And("the player place a tile on the board", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("the tiles on board must increase by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.And("the tiles on the hand of the player must decrease by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
